{"ast":null,"code":"var _jsxFileName = \"/Users/nahruskii24/Desktop - Nathaniel\\u2019s MacBook Pro/development/framer-clone/src/components/drop-target.tsx\",\n  _s = $RefreshSig$();\n// src/components/drop-target.tsx\n\nimport React from 'react';\nimport { useDrop } from 'react-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DropTarget = ({\n  onDrop,\n  children\n}) => {\n  _s();\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: 'DRAGGABLE_ELEMENT',\n    // Specify the type of draggable elements that can be dropped\n    drop: item => onDrop(item.type),\n    // Callback when an element is dropped\n    collect: monitor => ({\n      isOver: !!monitor.isOver() // Check if an element is being dragged over the target\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    style: {\n      border: isOver ? '2px dashed #000' : 'none',\n      padding: '10px'\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(DropTarget, \"9166pYLrZ/JzF75YDim8ZjfICTM=\", false, function () {\n  return [useDrop];\n});\n_c = DropTarget;\nexport default DropTarget;\nvar _c;\n$RefreshReg$(_c, \"DropTarget\");","map":{"version":3,"names":["React","useDrop","jsxDEV","_jsxDEV","DropTarget","onDrop","children","_s","isOver","drop","accept","item","type","collect","monitor","ref","style","border","padding","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nahruskii24/Desktop - Nathanielâ€™s MacBook Pro/development/framer-clone/src/components/drop-target.tsx"],"sourcesContent":["// src/components/drop-target.tsx\n\nimport React from 'react';\nimport { useDrop } from 'react-dnd';\n\ninterface DropTargetProps {\n  onDrop: (type: string) => void; // Callback for dropped element\n  children: React.ReactNode; // Element content\n}\n\nconst DropTarget: React.FC<DropTargetProps> = ({ onDrop, children }) => {\n  const [{ isOver }, drop] = useDrop({\n    accept: 'DRAGGABLE_ELEMENT', // Specify the type of draggable elements that can be dropped\n    drop: (item: { type: string }) => onDrop(item.type), // Callback when an element is dropped\n    collect: monitor => ({\n      isOver: !!monitor.isOver(), // Check if an element is being dragged over the target\n    }),\n  });\n\n  return (\n    <div ref={drop} style={{ border: isOver ? '2px dashed #000' : 'none', padding: '10px' }}>\n      {children}\n    </div>\n  );\n};\n\nexport default DropTarget;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOpC,MAAMC,UAAqC,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtE,MAAM,CAAC;IAAEC;EAAO,CAAC,EAAEC,IAAI,CAAC,GAAGR,OAAO,CAAC;IACjCS,MAAM,EAAE,mBAAmB;IAAE;IAC7BD,IAAI,EAAGE,IAAsB,IAAKN,MAAM,CAACM,IAAI,CAACC,IAAI,CAAC;IAAE;IACrDC,OAAO,EAAEC,OAAO,KAAK;MACnBN,MAAM,EAAE,CAAC,CAACM,OAAO,CAACN,MAAM,CAAC,CAAC,CAAE;IAC9B,CAAC;EACH,CAAC,CAAC;EAEF,oBACEL,OAAA;IAAKY,GAAG,EAAEN,IAAK;IAACO,KAAK,EAAE;MAAEC,MAAM,EAAET,MAAM,GAAG,iBAAiB,GAAG,MAAM;MAAEU,OAAO,EAAE;IAAO,CAAE;IAAAZ,QAAA,EACrFA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACf,EAAA,CAdIH,UAAqC;EAAA,QACdH,OAAO;AAAA;AAAAsB,EAAA,GAD9BnB,UAAqC;AAgB3C,eAAeA,UAAU;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}